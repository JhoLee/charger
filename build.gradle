buildscript {
    ext.kotlin_version = '1.3.21'

    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.7'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.8.1"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
    }
}

subprojects {
    apply plugin: 'signing'
    apply plugin: 'org.jetbrains.dokka'

    version = '0.1.0-SNAPSHOT'
    group = 'io.marauder.supercharger'

    plugins.withType(JavaPlugin) {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'

        plugins.withType(MavenPlugin) {

            dokka {
                outputFormat = 'html'
                outputDirectory = "$buildDir/docs/javadoc"
            }

            javadoc.dependsOn(dokka)

            javadoc {
                // link to JRE6 documentation
                options.author true
                options.links 'http://download.oracle.com/javase/8/docs/api/'
            }
            
            // package javadoc into a jar file
            task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
                from javadoc.destinationDir
                classifier = 'javadoc'
            }

            // package source into a jar file
            task packageSources(type: Jar) {
                from sourceSets.main.allSource
                classifier = 'sources'
            }

            // define artifacts for upload
            artifacts {
                archives jar
                archives packageJavadoc
                archives packageSources
            }
            
        }
    }

    ext {
        kotlinVersion = '3.11.0'
    }

    plugins.withType(MavenPlugin) {
        gradle.taskGraph.whenReady { taskGraph ->
            if (taskGraph.allTasks.any { it instanceof Sign }) {
                allprojects { ext."signing.keyId" = System.getenv('GPG_KEY_ID') }
                allprojects { ext."signing.secretKeyRingFile" = System.getenv('HOME') + "/build/marauder-io/supercharger/" + System.getenv('GPG_KEY_LOCATION') }
                allprojects { ext."signing.password" = System.getenv('GPG_PASSPHRASE') }
            }
            // Do not sign archives by default (a local build without gpg keyring should succeed)
            if (taskGraph.allTasks.any { it.name == 'build' || it.name == 'assemble' }) {
                tasks.findAll { it.name == 'signArchives' || it.name == 'signDocsJar' || it.name == 'signTestJar' }.each { task ->
                    task.enabled = false
                }
            }
        }
        // sign all artifacts
        signing {
            required { !version.endsWith('SNAPSHOT') && gradle.taskGraph.hasTask(':uploadArchives') }
            sign configurations.archives
        }

        uploadArchives.repositories.mavenDeployer {
            // sign artifacts before upload
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            // upload to geocode artifactory
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: rootProject.hasProperty('ossrhUsername') ? "$ossrhUsername" : "$System.env.ossrhUsername",
                    password: rootProject.hasProperty('ossrhPassword') ? "$ossrhPassword" : "$System.env.ossrhPassword")
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: this.hasProperty('ossrhUsername') ? "$ossrhUsername" : "$System.env.ossrhUsername",
                    password: this.hasProperty('ossrhPassword') ? "$ossrhPassword" : "$System.env.ossrhPassword")
            }

            // ensure correct artifact ID
            pom.artifactId = project.name

            // pom file details
            pom.project {
                name 'supercharger'
                packaging 'jar'
                description 'Supercharger is a Collection of Vector Tile Tools including the Supercharged Encoder!'
                url 'http://marauder.io/supercharger'

                scm {
                    url 'scm:git:git://https://github.com/marauder-io/supercharger.git'
                    connection 'scm:git:git://https://github.com/marauder-io/supercharger.git'
                    developerConnection 'scm:git:git://https://github.com/marauder-io/supercharger.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'florian-zouhar'
                        name 'Florian Zouhar'
                        email 'mail@zouhar.io'
                    }
                }
            }
        }
    }

}
